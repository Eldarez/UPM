LEA:      MACRO  (reg, ETIQ)
          or     reg, r0,  low(ETIQ)
          or.u   reg, reg, high(ETIQ)
          ENDMACRO

DBNZ:     MACRO  (reg, ETIQ)
          sub    reg, reg, 1
          cmp    r3, reg, r0
          bb0    eq, r3, ETIQ
          ENDMACRO

PUSH:     MACRO  (reg)
          subu   r30, r30, 4
          st     reg, r30, r0
          ENDMACRO

POP:      MACRO  (reg)
          ld     reg, r30, r0
          addu   r30, r30, 4
          ENDMACRO
		  
org 0
nF: data 5		  


org 1000
PPAL1:	LEA(r30, 40000)
		sub r15, r0, 2
		PUSH(r15)
		bsr nFiltrados
		stop


PPAL2:    LEA    (r30, 60000)  							 ; inicializaci√≥n del puntero de pila
          LEA ( r10, 2)     
          PUSH	 (r10)
	 	  bsr    Sqrt
		  stop		  


Imagen1: data    4, 8
		 data 0xFF55FF55, 0xFF55FF55
		 data 0x55FF55FF, 0x55FF55FF     
		 data 0xFF55FF55, 0xFF55FF55
		 data 0x55FF55FF, 0x55FF55FF

Imagen2: data    4, 8
		 data 0xFE54FE54, 0xFE54FE54
		 data 0x57FD57FD, 0x57FD57FD
		 data 0xFD54FE54, 0xFE54FE54
	     data 0x53FD53FD, 0x53FD53FD

Imagen3: data    4, 8
		 data 0x00000000, 0x00000000
		 data 0x000000E8, 0x00000000     
		 data 0x00000000, 0x00000000
		 data 0x00000000, 0x00000000

Imagen4: data    4, 8
		 data 0x00000000, 0x00000000
		 data 0x00000002, 0x00000000
		 data 0x00000000, 0x00000000
		 data 0x00000000, 0x00000000

Imagen5: data    4, 8
		 data 0xD1000000, 0x00000000
		 data 0x00000000, 0x00007A1D     
		 data 0x01000000, 0x00000000
		 data 0x00000000, 0x000000FF

Imagen6: data    4, 8
		 data 0x02000000, 0x00000000
		 data 0x00000000, 0x00000182
		 data 0xFF000000, 0x00000000
		 data 0x00000000, 0x00000010		 		 




PPAL3: LEA(r30, 60000)
	   LEA(r25, Imagen5)
	   LEA(r26, Imagen6)
	   PUSH(r26)
	   PUSH(r25)
	   bsr Comp
	   POP(r25)
	   POP(r26)
	   stop		  
		  

	  


Imagen: data 5, 8
		data 0x04030201, 0x08070605, 0x0C0B0A09
		data 0x100F0E0D, 0x14131211, 0x18171615
		data 0x1C1B1A19, 0x201F1E1D, 0x24232221
		data 0x28272625

ImagenA: data 3, 3
		data 0x04030201, 0x08070605, 0x09	

SubImagen: data	0xFFFFFFFF, 0xFFFFFFFF, 0xFF



IMAGEN9: data 7, 7
         data 0x04030201, 0x01070605
         data 0x05040302, 0x02010706
         data 0x06050403, 0x03020107
         data 0x07060504, 0x04030201
         data 0x01070605, 0x05040302
         data 0x02010706, 0x06050403
         data 0x07

PPAL4: LEA(r30, 80000)
	   LEA (r27, IMAGEN9)
	   LEA(r28, SubImagen)
	   LEA(r25, 2) 						;i
	   LEA(r26, 3)					    ;j
	    PUSH(r26)
		PUSH(r25)
		PUSH(r28)
		PUSH(r27)
		bsr SubMatriz
		POP(r27)
		POP(r28)
		POP(r25)
		POP(r26)
		stop  

SUBIMAGEN:data 0x13121110, 0x17161514, 0x18

MFILTRO: data 2, -1, -2, 1, 2, -1
		 data -2, 1, 0, 1, -2, 1
		 data 2, -1, -2, 1, 2, -1		

PPAL5: LEA (r30, 100000)
	   LEA (r27, SUBIMAGEN)
	   LEA (r28, MFILTRO)
	   PUSH(r28)
	   PUSH(r27)
	   bsr ValorPixel
	   POP(r27)
	   POP(r28)
	   stop

IMAGENfilPixel:	data    5, 5
				data    0x44332211, 0x03020155
				data    0x22210504, 0x31252423
				data    0x35343332, 0x44434241
				data    0x00000045

FILTROfilPixel: data    0, 1,  0,  1, 0, 1
				data    0, 1, -5, -5, 0, 1
				data    0, 1,  0,  1, 0, 1

IMAGENfilPix:	data    4, 8
				data    0x44444444, 0x44444444
				data    0x33343444, 0x44444444
				data    0x44884444, 0x44444444
				data    0x44444444, 0x44444444

FILTROfilPix: 	data    1, 8,  1,  8, 1, 8
				data    1, 8,  0,  8, 1, 8
				data    1, 8,  1,  8, 1, 8

IMAGENfilPix2:	data    4, 4
				data    0x01010101, 0x01010101
				data    0x01010101, 0x01010101

FILTROfilPix2: 	data    0, 8,  0,  8, 0, 8
				data    1, 1,  1,  1, 0, 8
				data    0, 8,  0,  1, 0, 8

IMAGENfilPix3:	data    4, 4
				data    0x01010130, 0x01010101
				data    0x01010101, 0x01010101

FILTROfilPix3: 	data    6, -1,  0,  8, 0, 8
				data    0, 1,  0,  1, 0, 8
				data    0, 8,  0,  1, 0, 8

PPAL6: 	LEA(r30, 120000)
		LEA(r27,IMAGENfilPix3)	
		LEA(r28,FILTROfilPix3)
		LEA(r25, 2)		  ;i=0
		LEA(r26, 2)       ;j=0
		PUSH(r28)
		PUSH(r26)
		PUSH(r25)
		PUSH(r27)
		bsr FilPixel
		POP(r27)
		POP(r25)
		POP(r26)
		POP(r28)
		stop

IMAGENFiltro:	data    4, 8
				data    0x04030201, 0x07060504
				data    0x14134211, 0x17168514
				data    0x24232221, 0x27262574
				data    0x34333231, 0x37363534

FILTRADA:res     40

FILTROF: data    0, 1, -3, 1, 0, 1
		data    0, 1,  4, 1, 0, 1
		data    0, 1,  0, 1, 0, 1		

IMAGENFiltro2:	data    4, 8
				data    0x04030201, 0x07060504
				data    0x0B0A0908, 0x0F0E0D0C
				data    0x13121110, 0x17161514
				data    0x1B1A1918, 0x1F1E1D1C

FILTRADA2:res     40

FILTROF2: data    0, 1, 0, 1, 0, 1
		data    0, 1,  1, 1, 0, 1
		data    0, 1,  0, 1, 0, 1

IMAGENFiltro3:	data    4, 6
				data    0x04030201, 0x02000605
				data    0x05030104, 0x0C090603
				data    0x0804120F, 0x80402010

FILTRADA3:		data    0xA5A5A5A5, 0xA5A5A5A5
				data    0xA5A5A5A5, 0xA5A5A5A5
				data    0xA5A5A5A5, 0xA5A5A5A5

FILTROF3: 	data    -2, -8, 0, -8, -2, -8
			data    0, -8,  0, -8, 0, -8
			data    -2, -8,  0, -8, -2, -8					

PPAL7: 	LEA(r30, 140000)
		LEA(r27,IMAGENFiltro3)	
		LEA(r28,FILTRADA3)
		LEA(r25, FILTROF3)		 
		PUSH(r25)
		PUSH(r28)
		PUSH(r27)
		bsr Filtro
		POP(r27)
		POP(r28)
		POP(r25)
		stop

; IMAGENFILTREC:	data    4, 4
; 		data    0x04030201, 0x0D0E0F10, 0x05040302, 0x23222120

; FILTROFILTREC: data    1, 8, 1, 8, 1, 8
; 		data    1, 8, 0, 8, 1, 8
; 		data    1, 8, 1, 8, 1, 8
		
; FILTRADAFILTREC:   res     24
;			data    0x55555555, 0x55555555

IMAGENFILTREC2:	data    5, 5
		data    0x000A000A, 0x0000000A, 0x000A0000, 0x000A000A
		data 	0x00000000, 0x000A000A, 0x0000000A

FILTROFILTREC2: data    0, 8, 0, 8, 0, 8
		data    0, 8, 1, 2, 0, 8
		data    0, 8, 0, 8, 0, 8
		
FILTRADAFILTREC2:   res     36
			data    0xA5A5A5A5	

; IMAGENFILTREC3:	data    4, 8
; 		data    0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF
; 		data    0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF
; FILTROFILTREC3: data    1, 4, 0, 4, 1, 4
; 		data    0, 4, 0, 4, 0, 4
; 		data    1, 4, 0, 4, 1, 4
		
; FILTRADAFILTREC3:   res     40
; 			data    0xAAAAAAAA, 0xAAAAAAAA

PPAL8: 	LEA(r30, 180000)
		LEA(r27,IMAGENFILTREC2)	
		LEA(r28,FILTRADAFILTREC2)
		LEA(r25, FILTROFILTREC2)
		LEA(r26, 2)
		PUSH(r26)		 
		PUSH(r25)
		PUSH(r28)
		PUSH(r27)
		bsr FiltRec
		POP(r26)
		POP(r27)
		POP(r28)
		POP(r25)
		stop



		  
Sqrt:	 			ld r29, r30, 0                               ;Cargamos la variable Num en el reg29
					cmp r5, r29, 2		                         ;Comparamos el valor Num con 2
					bb1 lt, r5, FINSqrtMenores                   ;Saltamos a FIN si Num es menor que 2
					or r2, r29, r0                               ;a=num;
					or r3, r0, 1                                 ;b=1
BucleSqrt:  		cmp r5, r29, r3                              ;comparamos a con b
					bb1 lt, r5, interSqrt                        ;si a<b, intercambiamos valores
            		sub r7, r29, r3                              ;r7<-)a-b
					cmp r5, r7, 1								 ;comparamos (a-b) con 1
					bb1 le, r5, FINSqrt							 ;si a-b<=1 saltamos a fin
					add r29, r29, r3							 ;si no, a=a+b
					divs r29, r29, 2                             ;a=a/2
					divs r3, r2, r29                             ;b=Num/a
					br BucleSqrt								 ;Otra iteracion del bucle							
interSqrt:  		or r8, r29, r0                               ;usamos un registro auxiliar para almacenar el valor a
		    		or r29, r3, r0                               ;a=b
					or r3, r8, r0                                ;b=aux
					br BucleSqrt
FINSqrtMenores: 	or r29, r29, r0
					jmp(r1)
FINSqrt:			or r29, r3, r0								 ;aseguramos el resultado en r29=b
					jmp(r1)                                      ;Saltamos a la posicion a la que apunta el PC
		 




nFiltrados:    		PUSH(r1)
					PUSH(r31)
					or r31, r30, r0
					ld r29, r0, 0							 ; Metemos nF en r29 desde la pos 0 de memoria
			   		ld r11, r31, 8							 ; Metemos el parametro oper en r11 desde la pila
               		cmp r3, r11, 0							 ;comparamos oper con 0
			   		bb1 lt, r3, decrementarnF 				 ;si oper<0 saltamos a decrementarnF
			   		bb1 ge, r3, igualarnF     				 ;si oper>=0 saltamos a igualarnF
decrementarnF: 		sub r29, r29, 1		    				 ;nF--
			   		cmp r5, r29, 0            				 ;comparamos nF con 0
			   		bb1 lt, r5, nFACero       				 ;si nF<0 saltamos a nFACero
			   		bb1 ge, r5, finnF         				 ;si nF>=0 saltamos a fin
igualarnF:     		or r29, r11, r11      				     ;nF=oper
			   		br finnF                  				 ;fin
nFACero:	   		or r29, r0, r0	    				     ;nF=0 
			   		br finnF								 ;fin
finnF:         		st r29, r0, r0
					or r30, r31, r0
					POP(r31)
					POP(r1)		
					jmp(r1)
					   






Comp:				PUSH(r1)
					PUSH(r31)
					or r31, r30, r30
					ld r20, r31, 8   							;Puntero a Imagen1
					ld r21, r31, 12								;Puntero a Imagen2
					or r10, r0, r0                              ;r10=acumulador=0
					ld r11, r20, 0                              ;r11=M
					addu r20, r20, 4							;Puntero a Imagen1 apunta a N
					ld r14, r20, 0 							    ;r14=N   
					muls r11, r11, r14                          ;r11=MxN
					addu r20, r20, 4							;Puntero a Imagen1 apunta al primer elemento de la matriz
					addu r21, r21, 8							;Puntero a Imagen2 apunta al primer elemento de la matriz
bucleComp:			cmp r3, r11, 0								;Comparamos r11 con 0
					bb1 eq, r3, finComp							;Si r11=1 saltamos a finComp
					ld.bu r12, r20, 0							;r12=elemento al que apunta PunteroIm1
					ld.bu r13, r21, 0							;r13=elemento al que apunta PunteroIm2
					sub r12, r12, r13							;elemIm1-elemIm2=diferencia
					muls r12, r12, r12                          ;(diferencia)^2
					add r10, r10, r12							;acumulador+=diferencia^2
					addu r20, r20, 1							;avanzar puntero Imagen1 1 byte
					addu r21, r21, 1							;avanzar puntero Imagen2 1 byte
					subu r11, r11, 1							;r11--
					br bucleComp
finComp:			PUSH(r10)									;Metemos r10 como par√°metro de llamada a Sqrt
					bsr Sqrt									;Llamamos a Sqrt
					or r30, r31, r31
					POP(r31)
					POP(r1)		
					jmp(r1)



SubMatriz:		 	PUSH(r1)
				 	PUSH(r31)
				 	or r31, r30, r30
				 	ld r20, r31, 8							;Puntero a Imagen
				 	ld r21, r31, 12							;Puntero a SubImagen
				 	ld r5, r31, 16							;par√°metro i
				 	ld r6, r31, 20							;par√°metro j
				 	or r4, r0, 9							;Contador=9
				 	or r7, r0, 3							;Contador Aux=3
				 	ld r10, r20, 0							;r10=M=numero de filas de la matriz
				 	ld r11, r20, 4							;r11=N=numero de columnas de la matriz
				 	addu r20, r20, 8						;puntero apunta al primer elemento de la matriz
				 	sub r5, r5, 1							; r5= i-1
				 	muls r5, r5, r11						; r5= (i-1)*N
				 	sub r6, r6, 1							; r6= j-1
				 	add r5, r5, r6						    ; r5=(i-1)*N+(j-1) Esta es la cantidad de posiciones que tiene que avanzar el puntero
				 	add r20,r20,r5                          ;para apuntar al primer elemento de la matriz que queremos extraer 
				 	sub r11, r11, 3						    ;r11=N-3  Este ser√° el ajuste que le haremos al puntero
bucleSubMatriz:	 	cmp r2, r4, 0							;Comparamos el contador con 0
				 	bb1 eq, r2, finSubMatriz				;Si el contador=0 significa que hemos acabado 
				 	cmp r3, r7, 0							;Si el contadorAux=0
				 	bb1 eq, r3, ajustePuntero				;Saltamos a ajustePuntero
vuelta:			 	ld.bu r12, r20, r0                      ;Metemos el elemento en r12
				 	st.b r12, r21, r0						;Y lo insertamos en la posicion a la que apunta el puntero de subImagen
				 	addu r20, r20, 1                        ;Avanzamos el puntero de Imagen
				 	addu r21, r21, 1						;Avanzamos el puntero de subImagen
				 	sub r4, r4, 1							;Decrementamos el contador
				 	sub r7, r7, 1							;Decrementamos el contador Auxiliar
				 	br bucleSubMatriz
ajustePuntero:  	or r7, r0, 3							;volvemos a poner el contador auxiliar a 3
					add r20, r20, r11						;aplicamos el ajuste al puntero
					br vuelta								;volvemos a meter elementos
finSubMatriz:   	or r30, r31, r31
					POP(r31)
					POP(r1)
					jmp(r1)				 







ValorPixel: 		PUSH(r1)
            		PUSH(r31)
            		or r31,r30,r30                              ;creamos el marco de pila
            		ld r20,r31,8                                ;metemos en r20, el puntero a SubImg
            		ld r21,r31,12                               ;metemos en r21, el puntero a MFiltro                                                        
            		or r15 ,r0,r0                               ;inicializamos un contador que ser√° la condici√≥n de parada
            		or r16, r0,r0                               ;creamos la variable acum
            		or r2,r0,256                                ;creamos la cte 'K'=256
BucVPixel:  		cmp r3, r15,9                               ;comparamos si  contador==9
            		bb1 eq, r3, finVPixel   
					ld.bu r10,r20,0                             ;nos metemos en el primer elemento de SubImg
            		ld r11,r21,0                             	;nos metemos en el primer elemento de MFiltro
            		ld r12 ,r21,4                     			;nos metemos en el segundo elemento de MFiltro
					muls r11, r11, r2                           ;multiplicamos el numerador por 256
            		muls r8, r11,r10                            ;multiplicamos ese valor con el elemento correspondiente de SubImg
					divs r17,r8,r12                             ;dividimos el anterior resultado con su denominador correspondiente            		
            		add r16,r16,r17                             ;aumentamos la variable acum en el valor obtenido anteriormente en r8
            		addu r20,r20,1                              ;movemos el puntero de SubImg 1 posici√≥n
            		addu r21,r21,8                              ;movemos el puntero inicial de MFiltro 2 posiciones
            		addu r15,r15,1                              ;aumentamos el contador 1
            		br BucVPixel                                ;repetimos el bucle
finVPixel:  		divs r16,r16,r2    							;dividimos el valor de acum total por 256   
            		or r29,r16,r16                              ;metemos en r29 el valor de acum
            		or r30,r31,r31                              ;deshacemos la pila
            		POP(r31)
            		POP(r1)
            		jmp(r1)

FilPixel:			PUSH(r1)
            		PUSH(r31)
            		or r31,r30,r30                              ;creamos el marco de pila
					ld r20, r31, 8								;cargamos el puntero a Imagen en r20
					ld r15, r31, 12								;cargamos el valor i 
					ld r16, r31, 16								;cargamos el valor j
					ld r21, r31, 20								;cargamos el puntero a MFiltro
					ld r17, r20, 0								;cargamos el valor M
					ld r18, r20, 4								;cargamos el valor N
					or r25, r20, 0								;guardo la direccion a imagen en r25
					addu r20, r20, 8							;apuntamos al primer elemento de imagen
					subu r3, r17, 1								;r3=M-1
					subu r4, r18, 1								;r4=N-1
					cmp r5, r15, 0								;si i==0
					bb1 eq, r5, esBorde							;saltamos a esBorde
					cmp r5, r16, 0								;si j==0
					bb1 eq, r5, esBorde							;saltamos a esBorde
					cmp r5, r15, r3								;si i==M-1
					bb1 eq, r5, esBorde							;saltamos a esBorde
					cmp r5, r16, r4								;si j==N-1
					bb1 eq, r5, esBorde							;saltamos a esBorde 
					PUSH(r21)									;Guardamos la direccion de MFiltro en pila
					PUSH(r20)									;Guardamos la direccion de Imagen en pila
					subu r30, r30, 12							;Reservamos espacio para SubImagen
					or r24, r30, 0								;Metemos en r24 la direccion donde se almacenara SubImagen
					PUSH(r16)									;Metemos en pila los parametros de SubMatriz
					PUSH(r15)
					PUSH(r24)
					PUSH(r25)
					bsr SubMatriz
					ld r24, r30, 4								;Cargamos en r24 la direccion de SubImagen
					ld r21, r30, 32								;Cargamos en r21 la direccion de MFiltro
					PUSH(r21)									;Metemos los parametros de ValorPixel en pila
					PUSH(r24)
					bsr ValorPixel
					addu r30, r30, 44
ajustarPixel:		cmp r5, r29, 0								;Si r29<0
					bb1 lt, r5, ajustarMenores					;Saltamos a ajustarMenores
					cmp r5, r29, 255							;Si r29>255
					bb1 gt, r5, ajustarMayores					;Saltamos a ajustarMayores
finAjustado:		or.u r29, r29, 0
					POP(r31)									;Eliminamos el marco de pila
					POP(r1)
					jmp(r1)										;Devolvemos el control a la rutina llamante
esBorde:			mulu r7, r15, r18							;desplazamiento=i*N
					addu r7, r7, r16							;desplazamiento=i*N+j
					addu r20, r20, r7							;desplazamos el cursor hasta el pixel ij
					ld.bu r29, r20, 0							;cargamos el valor del pixel
					br ajustarPixel
ajustarMayores:		or r29, r0, r0								;ajustamos r29 a 255
					addu r29, r29,255
					br finAjustado
ajustarMenores:		or r29, r0, r0								;ajustamos r29 a 0
					br finAjustado

Filtro:				PUSH(r1)
					PUSH(r31)
					or r31, r30, r30
					ld r20, r31, 8 								;cargamos el puntero a Imagen
					ld r21, r31, 12								;cargamos el puntero a ImFiltrada
					ld r22, r31, 16								;cargamos el puntero MFiltro
					ld r8, r20, 0								;r8=M
					ld r9, r20, 4								;r9=N
					st r8, r21, 0								;Metemos el parametro M en ImFiltrada
					st r9, r21, 4								;Metemos el parametro N en Imfiltrada
					addu r21, r21, 8
					or r10, r0, r0								;r10=i=0
					or r11, r0, r0								;r11=j=0
					muls r7,r8, r9								;r7=MxN=contador
bucleFiltro:		cmp r5, r7, 0								;Si r7=0
					bb1 le, r5, finFiltro						;Saltamos a finFiltro
					cmp r5,r11,r9								;Si j=N
					bb1 ge, r5, ajusteJ							;Saltamos a ajusteJ
					PUSH(r7)									;Guardamos el contador
					PUSH(r20)
					PUSH(r21)									;guardamos la direccion que contiene el puntero de ImFiltrada
					PUSH(r22)									;metemos los parametros en pila para la llamada a FilPixel
					PUSH(r11)
					PUSH(r10)
					PUSH(r20)
					bsr FilPixel								;Saltamos a FilPixel
					ld r7, r30, 24								;Recuperamos r7
					ld r20,r30, 20								;Recuperamos Imagen
					ld r21, r30, 16								;Cargamos la direccion que teniamos antes de la llamada en ImFiltrada
					ld r10, r30, 4
					ld r11, r30, 8
					st.b r29, r21, 0							;Metemos el resultado de la llamada a FilPixel en la direccion de r21
					addu r30, r30, 28							;Decrementamos la pila
					addu r21, r21, 1							;Avanzamos el puntero de ImFiltrada
					addu r11, r11, 1							;j++
					subu r7, r7, 1								;contador--
					br bucleFiltro
ajusteJ:			or r11, r0, r0								;j=0
					addu r10, r10, 1							;i++
					br bucleFiltro
finFiltro:			or r30, r31, r31							;Eliminamos el marco de pila
					POP(r31)
					POP(r1)			
					jmp(r1)



FiltRec:			ld r20, r30, 0								;Cargamos el Puntero a ImagenIn
					ld r21, r30, 4								;Cargamos el Puntero a ImagenOut
					ld r22, r30, 8								;Cargamos el Puntero a Mfiltro
					ld r10, r30, 12								;NCambios
					ld r11, r20, 0								;Cargamos la variable M
					ld r12, r20, 4								;Cargamos la variable N
					mulu r2, r11, r12							;r2=M*N
mult4:		        divu r5, r2, 4; Division entera entre 4
					mulu r5, r5, 4; Multiplicacion por 4
					cmp r7, r5, r2; Si coinciden es porque el n¬∫ es multiplo de 4
					bb1 eq, r7, sigue
					addu r2, r2, 1; (M*N)+1
					br mult4
sigue:				addu r2, r2, 8
					subu r30, r30, r2							;Desplazamos r30 para reservar espacio para ImgTmp
					or r23,r30,r30								;Metemos el puntero a IMGTMP en r23
					PUSH(r1)
					PUSH(r31)
					or r31,r30,r30
					PUSH(r2)
					PUSH(r23)									;Guardamos en pila el puntero a IMGTMP	
					PUSH(r10)				
					PUSH(r22)									;Metemos como parametro a Filtro MFILTRO
					PUSH(r21)									;Metemos como parametro a Filtro IMAGENOUT
preFiltro:			PUSH(r20)									;Metemos como parametro a Filtro IMAGENIN
					bsr Filtro
trasFiltro:			POP(r20)
					POP(r21)
					POP(r22)
					POP(r10)
					POP(r23)
					POP(r2)
					or r30,r31,r31
					POP(r31)
					POP(r1)
					ld r5,r21,0
					ld r6,r21,4
					st r5,r23,0
					st r6,r23,4
					or r6,r21,r0
					or r7,r23,r0
					addu r21,r21,8
					addu r23,r23,8
copiarMatriz:		cmp r5, r2, 0								
					bb1 eq, r5, mCopiada
					ld.bu r8, r21, 0
					st.b r8, r23, 0
					addu r21, r21, 1
					addu r23, r23, 1
					subu r2, r2, 1
					br copiarMatriz
mCopiada:			or r21,r6,r6							;recuperamos punteros tras la copia
					or r23,r7,r7							;recuperamos punteros tras la copia
					sub r2, r0, 1							;-1 para nFiltrados
					
					PUSH(r1)
					PUSH(r31)
					or r31,r30,r30
					PUSH(r10)
					PUSH(r22)
					PUSH(r21)
					PUSH(r20)
prenfilt:			PUSH(r2)
					bsr nFiltrados
					POP(r2)
					POP(r20)
					POP(r21)
					POP(r22)
					POP(r10)
					or r31,r30,r30
					POP(r31)
					POP(r1)
postnfilt:			cmp r5, r29,0
					bb1 eq,r5, nFiltradosA0
					PUSH(r1)
					PUSH(r31)
					or r31,r30,r30
					PUSH(r2)
					PUSH(r10)
					PUSH(r22)
					PUSH(r21)
preComp:			PUSH(r20)
					bsr Comp
trasComp:			POP(r20)
					POP(r21)
					POP(r22)
					POP(r10)
					POP(r2)
					or r30,r31,r31
					POP(r31)
					POP(r1)
					cmp r5,r29,r10
orrr:				bb1 lt,r5,finFiltRec
					PUSH(r1)
					PUSH(r31)
					or r31,r30,r30
					PUSH(r10)
					PUSH(r22)
					PUSH(r21)
preFiltRec:			PUSH(r23)
					bsr FiltRec
trasFiltRec:		or r30,r31,r31
					POP(r31)
					POP(r1)

					br finFiltRec
nFiltradosA0:		sub r29,r29,1
finFiltRec:			jmp(r1)	


			



